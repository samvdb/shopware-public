---
include:
    - project: "infrastructure/gitlab-ci-templates"
      ref: "master"
      file: "/templates/global.gitlab-ci.yaml"
    - project: "infrastructure/gitlab-ci-templates"
      ref: "master"
      file: "/templates/setup.gitlab-ci.yaml"

variables:
    GIT_STRATEGY: fetch
    DOCKER_DRIVER: overlay2
    # Set the environments variables manually
    APP_ENV: ci
    APP_DEBUG: 0
    APP_SECRET: XX
    # Set memory limit to infinite to avoid running out of memory issues
    COMPOSER_MEMORY_LIMIT: -1
    REDIS_HOST: "redis://127.0.0.1:6379"
    BUILDER_IMAGE: shopware/development:8.1-composer-2
    DATABASE_URL: 'mysql://root:root@localhost'
    RABBITMQ_QUEUE_SUFFIX: "suffix"

stages:
    - prepare
    - build
    - release
    - deploy

.default-deploy-job:
    extends:
        - .default-retry
        - .default-before_script
    image: argoproj/argo-cd-ci-builder:v1.0.0
    retry:
        max: 2
        when:
            - unknown_failure
            - api_failure
            - runner_system_failure
            - script_failure
    except:
        variables:
            - $SKIP == "true"
    variables:
        GIT_STRATEGY: none
        NAME: ${CI_PROJECT_PATH}
        SKIP: 'false'
    script:
        - echo "Environment ${CI_ENVIRONMENT_NAME}"
        - echo "Using TAG ${TAG}"
        - git clone --single-branch --branch ${CI_ENVIRONMENT_NAME} git@gitlab.myvink.be:infrastructure/deployments.git
        - cd deployments/services/${NAME}/base
        - kustomize edit set image image=$CI_REGISTRY/$CI_PROJECT_PATH:${TAG}
        - '[[ -z $(git status -uno --porcelain) ]] && echo "this branch is clean, no need to push..." || git commit -am "Publish new version for ${CI_PROJECT_PATH}" && git push'

setup:dependencies:composer:
    extends: .only-code-pull-push-php-job-base
    image: $BUILDER_IMAGE
    stage: prepare
    script:
        - composer install --prefer-dist --no-ansi --no-scripts --no-interaction --no-progress --no-suggest
    artifacts:
        expire_in: 1 day
        paths:
            - vendor/




.release-base:
    stage: release
    image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    before_script:
        - mkdir -p /kaniko/.docker
        - echo $CI_PIPELINE_ID > .gitlab-pipeline
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    artifacts:
        reports:
            dotenv: build.env

release:dev:
    extends: .release-base
    script:
        - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile  --destination $CI_REGISTRY_IMAGE:latest --destination $CI_REGISTRY_IMAGE:git-$CI_COMMIT_SHORT_SHA
        - echo "TAG=git-$CI_COMMIT_SHORT_SHA" > build.env


#setup:dependencies:composer:
#    extends: .only-code-pull-push-php-job-base
#    image: $BUILDER_IMAGE
#    stage: prepare
#    script:
#        - composer install --prefer-dist --no-ansi --no-scripts --no-interaction --no-progress --no-suggest
#    artifacts:
#        expire_in: 1 day
#        paths:
#            - vendor/

#build:bundle:
#    stage: build
#    extends: .only-code-php-job-base
#    script:
#        - bin/ci bundle:dump
#    artifacts:
#        paths:
#            - var/plugins.json
build:
    stage: build
    image: $BUILDER_IMAGE
    extends: .php-job-base
    variables:
        CI: 1
        APP_ENV: ci
#        SHOPWARE_SKIP_THEME_COMPILE: 1
#        SHOPWARE_SKIP_BUNDLE_DUMP: 1
    script:
#        - patch  vendor/shopware/platform/src/Core/Framework/Plugin/Util/AssetService.php debug.patch
        - bin/build-administration.sh
        - bin/build-storefront.sh
        - ls -lha public/theme/

    artifacts:
        paths:
            - files/theme-config/*
            - var/plugins.json
            - vendor/shopware/platform/src/Storefront/Resources/app/storefront/dist
#            - var/theme-files.json
#            - var/theme-variables.
            - public/*
            - vendor

deploy:dev:
    extends: .default-deploy-job
    stage: deploy
    dependencies:
        - release:dev
    only:
        - main
    environment:
        name: dev

                #variables:
#    DOCKER_DRIVER: overlay2
#    DOCKER_TLS_CERTDIR: "/certs"
#    DOCKER_HOST: "tcp://docker:2375"
#    # shopware 6
#    WEB_DOCUMENT_ROOT: '$CI_PROJECT_DIR/public'
#    MYSQL_ROOT_PASSWORD: root
#    DEFAULT_PLATFORM_BRANCH: master
#    LOG_STDOUT: $CI_PROJECT_DIR/stdout.log
#    CYPRESS_PERCY_USAGE: $CYPRESS_PERCY_USAGE
#    PERCY_BUILD_NAME: '000'
#
#stages:
#    - build
#    - analyze
#    - test
#    - prepare-release
#    - release
#
#include:
#    -   local: .gitlab-ci/release_jobs.yml
#    -   local: .gitlab-ci/test_base.yml
#    -   local: .gitlab-ci/integration_jobs.yml
#
#Build Test Package:
#    interruptible: true
#    stage: build
#    tags:
#        - release
#    only:
#        refs:
#            - schedules
#            - merge_requests
#    image: debian:bullseye-slim
#    services:
#        -   name: docker:18.09.7-dind
#            alias: docker
#    variables:
#        GIT_STRATEGY: none
#        SPLIT_REPOS: "Administration Storefront Core Elasticsearch Recovery"
#        SPLITSH: /opt/splitsh-lite
#        SHOPWARE_SKIP_BUNDLE_DUMP: 1
#        SHOPWARE_SKIP_ASSET_COPY: 1
#        SHOPWARE_SKIP_THEME_COMPILE: 1
#    cache:
#        key: "package_$CI_COMMIT_BRANCH"
#        paths:
#            - .platform
#            - .composer
#            - .apt
#            - .npm
#        policy: pull-push
#    before_script:
#        - apt-get update
#        - DEB_PACKAGES="git jq curl docker.io build-essential nodejs php-cli php-ctype php-curl php-dom php-fileinfo php-gd php-iconv php-intl php-json php-mbstring php-pdo php-mysql php-simplexml php-xml php-zip"
#        # setup caching
#        - rm /etc/apt/apt.conf.d/docker-clean
#        - cp -a /var/cache/apt .apt
#        - echo "Dir::Cache::Archives ${PWD}/.apt;" >> /etc/apt/apt.conf.d/cache.conf
#        - apt-get install -y --download-only curl && apt-get install -y curl
#        - curl -sL https://deb.nodesource.com/setup_12.x | bash -
#        - apt-get install -y --download-only $DEB_PACKAGES && apt-get install -y $DEB_PACKAGES
#        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
#        - npm config set cache $PWD/.npm
#        # we need to do the checkout to have correct permissions. See: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1736
#        - umask 0022
#        - git config --global init.defaultBranch trunk
#        - git init .
#        - git remote add origin ${CI_REPOSITORY_URL}
#        - git fetch origin $CI_COMMIT_BRANCH
#        - git fetch --tags
#        - git checkout -f -q ${CI_COMMIT_SHA}
#        - git log -n 5
#        - composer config --global  cache-dir $PWD/.composer
#        # install helper tools
#        - composer install --working-dir=.gitlab-ci/tools
#        - '[[ -x $SPLITSH ]] || (curl -sL https://github.com/splitsh/lite/releases/download/v1.0.1/lite_linux_amd64.tar.gz | tar -xz ./splitsh-lite && mv splitsh-lite $SPLITSH)'
#        - chmod +x $SPLITSH
#        - HASH_CHECK_LINE="ec46c5a409422bf55b26f7de1faab67c2320362934947f984872b3aedc4a9d99  $SPLITSH"
#        - echo $HASH_CHECK_LINE | sha256sum -c
#    script:
#        # clone platform if it's not cached. We use caching to speed up the split
#        - export TAG=${TAG:-$(.gitlab-ci/tools/console release:show-next-tag)}
#        - '[[ -d .platform/ ]] || git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git -b ${DEFAULT_PLATFORM_BRANCH} --bare .platform'
#        - git -C .platform remote set-url origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git
#        # Find best matching branch. Example try: 6.3.2.1, 6.3.2, 6.3, master
#        - export MATCHING_BRANCH=$(.gitlab-ci/tools/console release:show-platform-branch $TAG .platform)
#        - if [[ -z $MATCHING_BRANCH ]]; then echo "No matching branch found"; exit 1; fi
#        - echo "Checkout platform branch $MATCHING_BRANCH"
#        # fetch newest changes from $MATCHING_BRANCH
#        - git -C .platform fetch origin ${MATCHING_BRANCH}
#        # set HEAD to newest commit in $$MATCHING_BRANCH
#        - git -C .platform reset --soft FETCH_HEAD
#        - git -C .platform fetch --tags origin
#        - git -C .platform log -n 5
#        # split platform into separate repos/packages
#        - >
#            for pkg in $SPLIT_REPOS ; do
#              .gitlab-ci/split_repo.sh .platform src/${pkg}
#              git -C .platform/ rev-parse HEAD > repos/${pkg,,}/PLATFORM_COMMIT_SHA
#            done
#        # build test package
#        - .gitlab-ci/build-nightly.sh
#        - IMAGE_TAG=${TAG}-dev
#        - docker build . -t "${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
#        - mkdir artifacts || true
#        - chmod 777 artifacts || true
#        - .gitlab-ci/changed-files.sh > artifacts/additional_update_files
#        - .gitlab-ci/changed-files.sh --deleted > artifacts/additional_deleted_files
#        # TODO: get REFERENCE_INSTALLER_URL and REFERENCE_INSTALLER_SHA256 from shopware6.xml - use MINIMUM_VERSION
#        # create package archive file
#        - 'echo "Default env: $DEFAULT_ENV"'
#        - docker run
#            -v $PWD/artifacts:/artifacts
#            -e DEFAULT_ENV -e REFERENCE_INSTALLER_URL -e REFERENCE_INSTALLER_SHA256
#            --entrypoint=bin/package.sh ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
#            /artifacts/additional_update_files
#            /artifacts/additional_deleted_files
#        - echo ${TAG} > artifacts/TAG
#        - echo ${CI_JOB_ID} > artifacts/PACKAGE_JOB_ID
#        - echo ${MATCHING_BRANCH} > artifacts/PLATFORM_BRANCH
#
#    artifacts:
#        expire_in: 1 week
#        paths:
#            - artifacts/
#            - repos/
#
#Static Analysis:
#    stage: analyze
#    image: shopware/development:7.4-composer-2
#    only:
#        refs:
#            - merge_requests
#    script:
#        - apt update && apt install shellcheck
#        # SC1090: source is not resolved
#        # SC2039: busybox sh supports [[
#        - shellcheck --exclude=SC1090 --exclude=SC2039 bin/*.sh .gitlab-ci/*.sh .gitlab-ci/tools/bin/*.sh .gitlab-ci/e2e/*.sh
#        - composer install
#        - composer install -d .gitlab-ci/tools
#        - php .gitlab-ci/tools/vendor/bin/ecs check --config easy-coding-standard.php
#        - php .gitlab-ci/tools/vendor/bin/phpstan analyse
#        - php .gitlab-ci/tools/vendor/bin/psalm
#
#Tools unit test:
#    stage: test
#    image: shopware/development:7.4-composer-2
#    only:
#        refs:
#            - merge_requests
#    script:
#        - composer install -d .gitlab-ci/tools
#        - php .gitlab-ci/tools/vendor/bin/phpunit --configuration .gitlab-ci/tools/phpunit.xml.dist --log-junit phpunit.junit.xml
#    artifacts:
#        when: always
#        paths:
#            - phpunit.junit.xml
#        reports:
#            junit: phpunit.junit.xml
#
## Unit tests
#
#Unit PHP 7.4:
#    extends: .unit_base
#    image: shopware/development:7.4-composer-2
#
## e2e install tests
#
#Install (Visual, EN):
#    extends: .e2e_install_base
#    only:
#        refs:
#            - schedules
#        variables:
#            - $CYPRESS_PERCY_USAGE == "true"
#    variables:
#        GIT_STRATEGY: none
#    script:
#        - cp artifacts/install*.tar.xz install.tar.xz
#        - tar -xf install.tar.xz
#        - rm install.tar.xz
#        - /entrypoint supervisord > /dev/null 2>&1 &
#        - apt-get update && apt-get install -y xvfb
#        - cd vendor/shopware/recovery/Test/e2e
#        - npm clean-install
#        - echo $PERCY_BUILD_NAME
#        - timeout 20m npx percy exec -- cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG,usePercy=$CYPRESS_PERCY_USAGE
#            --spec cypress/integration/installer/basic.spec.js
#        - timeout 5m npx percy exec -- cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG,usePercy=$CYPRESS_PERCY_USAGE
#            --spec "cypress/integration/visual/*"
#
#Install (EN):
#    extends: .e2e_install_base
#    only:
#        refs:
#            - schedules
#        variables:
#            - $CYPRESS_PERCY_USAGE == "false"
#    variables:
#        GIT_STRATEGY: none
#    script:
#        - cp artifacts/install*.tar.xz install.tar.xz
#        - tar -xf install.tar.xz
#        - rm install.tar.xz
#        - /entrypoint supervisord > /dev/null 2>&1 &
#        - apt-get update && apt-get install -y xvfb
#        - cd vendor/shopware/recovery/Test/e2e
#        - npm clean-install
#        - timeout 20m $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG
#            --spec cypress/integration/installer/basic.spec.js
#        - timeout 5m $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG
#            --spec "cypress/integration/visual/*"
#
#Install (NL):
#    extends: .e2e_install_base
#    variables:
#        GIT_STRATEGY: none
#    script:
#        - cp artifacts/install*.tar.xz install.tar.xz
#        - tar -xf install.tar.xz
#        - rm install.tar.xz
#        - /entrypoint supervisord > /dev/null 2>&1 &
#        - apt-get update && apt-get install -y xvfb
#        - cd vendor/shopware/recovery/Test/e2e
#        - npm clean-install
#        - $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG,locale="nl-NL"
#            --spec cypress/integration/installer/install_nl.spec.js
#
## e2e update tests
#
#Manual Update (EN):
#    extends: .e2e_update_base
#    variables:
#        E2E_INSTALL_PACKAGE_URL: $REFERENCE_INSTALLER_URL
#        E2E_TEST_DATA_FILE: "v6.1.6_test_data.tar.xz"
#    script:
#        - unzip -qqo artifacts/update.zip
#        - chown -R application:application $CI_PROJECT_DIR
#        - cd vendor/shopware/recovery/Test/e2e/
#        - npm ci
#        - npm install --save-dev @percy/cypress
#        - timeout 20m $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG
#            --spec cypress/integration/updater/manual-update.spec.js
#        - timeout 5m $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG,testDataUsage=true
#            --spec cypress/integration/updater/validation/storefront.spec.js
#    after_script:
#        - npx mochawesome-merge .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/mochawesome*.json > .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/report-final.json
#        - npx mochawesome-report-generator .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/report-final.json --cdn true --reportDir .gitlab-ci/e2e/test/artifacts/mochawesome
#
#.E2E Update:
#    extends: .e2e_update_base
#    artifacts:
#        when: always
#        expire_in: 1 week
#        paths:
#            - .gitlab-ci/e2e/test/artifacts/*
#            - var/log/*
#            - development/var/log/*
#            - $CI_PROJECT_DIR/stdout.log
#    after_script:
#        - npx mochawesome-merge .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/mochawesome*.json > .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/report-final.json
#        - npx mochawesome-report-generator .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/report-final.json --cdn true --reportDir .gitlab-ci/e2e/test/artifacts/mochawesome
#
#Update (Mysql 8.0):
#    extends: .E2E Update
#    services:
#        -   name: mysql:8.0.19
#            alias: mysql
#            command: [ "mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci", "--default-authentication-plugin=mysql_native_password" ]
#        -   name: elastic/elasticsearch:7.8.0
#            alias: elasticsearch
#            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
#    script:
#        - cd .gitlab-ci/e2e/test/
#        - timeout 20m $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG
#            --spec cypress/integration/updater/auto-update.spec.js
#        - timeout 5m $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG,testDataUsage=true
#            --spec "cypress/integration/updater/validation/*"
#    variables:
#        E2E_INSTALL_PACKAGE_URL: $REFERENCE_INSTALLER_URL
#        E2E_TEST_DATA_FILE: "v6.1.6_test_data.tar.xz"
#
#Update (Visual, DE):
#    extends: .E2E Update
#    only:
#        refs:
#            - schedules
#        variables:
#            - $CYPRESS_PERCY_USAGE == "true"
#    script:
#        - cd .gitlab-ci/e2e/test/
#        - echo $PERCY_BUILD_NAME
#        - timeout 20m npx percy exec -- cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG,usePercy=$CYPRESS_PERCY_USAGE,testBase="Update"
#            --spec cypress/integration/updater/auto-update.spec.js
#        - timeout 5m npx percy exec -- cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG,testDataUsage=true,testBase="Update",locale="de-DE",usePercy=$CYPRESS_PERCY_USAGE
#            --spec "cypress/integration/visual/*"
#    variables:
#        E2E_INSTALL_PACKAGE_URL: $REFERENCE_INSTALLER_URL
#        E2E_TEST_DATA_FILE: "v6.1.6_test_data.tar.xz"
#
#Update (DE):
#    extends: .E2E Update
#    only:
#        refs:
#            - schedules
#        variables:
#            - $CYPRESS_PERCY_USAGE == "false"
#    script:
#        - cd .gitlab-ci/e2e/test/
#        - timeout 20m $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG,testBase="Update"
#            --spec cypress/integration/updater/auto-update.spec.js
#        - timeout 5m $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG,testDataUsage=true,testBase="Update",locale="de-DE"
#            --spec "cypress/integration/visual/*"
#    variables:
#        E2E_INSTALL_PACKAGE_URL: $REFERENCE_INSTALLER_URL
#        E2E_TEST_DATA_FILE: "v6.1.6_test_data.tar.xz"
#
#
#Update from latest:
#    extends: .E2E Update
#    only:
#        refs:
#            - schedules
#        variables:
#            - $E2E_INSTALL_PACKAGE_URL_LATEST
#    script:
#        - cd .gitlab-ci/e2e/test/
#        - '[[ ! -e cypress/integration/updater/pre-update ]] || timeout 5m $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG
#            --spec "cypress/integration/updater/pre-update/*"'
#        - timeout 20m $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG,testBase="Update"
#            --spec cypress/integration/updater/auto-update.spec.js
#        - timeout 5m $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG,testDataUsage=true,testBase="Update",locale="de-DE"
#            --spec "cypress/integration/visual/*"
#        - '[[ ! -e cypress/integration/updater/post-update ]] || timeout 5m $(npm bin)/cypress run
#            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0 --headless
#            --env expectedVersion=$TAG
#            --spec "cypress/integration/updater/post-update/*"'
#        - cd $CI_PROJECT_DIR
#        - php bin/console bundle:dump
#        - bash bin/build-administration.sh
#    variables:
#        E2E_INSTALL_PACKAGE_URL: $E2E_INSTALL_PACKAGE_URL_LATEST
#        E2E_TEST_DATA_FILE: "v6.1.6_test_data.tar.xz"
#
#Finalize Percy Build:
#    extends: .e2e_install_base
#    stage: prepare-release
#    when: always
#    only:
#        refs:
#            - schedules
#        variables:
#            - '$CYPRESS_PERCY_USAGE == "true" && $PERCY_TOKEN'
#    script:
#        # finalize all visual testing jobs
#        - export PERCY_TOKEN=$PERCY_TOKEN
#        - export PERCY_BUILD_NAME=$CI_PIPELINE_ID
#        - export PERCY_PARALLEL_NONCE=$PERCY_BUILD_NAME
#        - export PERCY_PARALLEL_TOTAL=-1
#        - npm install -g percy --unsafe-perm=true
#        - percy finalize --all
#
